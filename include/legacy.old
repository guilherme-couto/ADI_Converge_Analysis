void createDirectories(real delta_t, real delta_x, real delta_y, char *pathToSaveData)
{
    // Build the path
    char path[MAX_STRING_SIZE];

#ifndef CABLEEQ

    // snprintf(path, MAX_STRING_SIZE, "./simulation_files/dt_%.5g_dx_%.5g_dy_%.5g/%s/%s/%s/%s/%s", delta_t, delta_x, delta_y, EXECUTION_TYPE, REAL_TYPE, PROBLEM, CELL_MODEL, METHOD);

#else // if def CABLEEQ

    snprintf(path, MAX_STRING_SIZE, "./simulation_files/dt_%.5g_dx_%.5g/%s/%s/%s/%s/%s", delta_t, delta_x, EXECUTION_TYPE, REAL_TYPE, PROBLEM, CELL_MODEL, METHOD);

#endif // not CABLEEQ

#ifdef THETA

    // Add theta to the path
    char thetaPath[MAX_STRING_SIZE];
    snprintf(thetaPath, MAX_STRING_SIZE, "%.2lf", THETA);
    strcat(path, "/");
    strcat(path, thetaPath);

#endif // THETA

    // Update pathToSaveData
    strcpy(pathToSaveData, path);

    // Create directories
    char temp[MAX_STRING_SIZE];
    strcpy(temp, path);

    char *p = temp;
    while (*p) {
        if (*p == '/') {
            *p = '\0';
            if (mkdir(temp, 0777) != 0 && errno != EEXIST)
                ERRORMSG("Error creating dir %s: %s\n", temp, strerror(errno));

            *p = '/';
        }
        p++;
    }
    if (mkdir(temp, 0777) != 0 && errno != EEXIST)
        ERRORMSG("Error creating dir %s: %s\n", temp, strerror(errno));
}

void populateStimuli(Stimulus *stimuli, real delta_x, real delta_y, int numberOfStimuli, real stimuliAmplitude, real *stimuliBegin, real stimuliDuration, real *stimulixMax, real *stimulixMin, real *stimuliyMax, real *stimuliyMin)
{
    for (int i = 0; i < numberOfStimuli; i++)
    {
        stimuli[i].amplitude = stimuliAmplitude;
        stimuli[i].begin = stimuliBegin[i];
        stimuli[i].duration = stimuliDuration;

        // Discretized limits of stimulation areas
        stimuli[i].xMaxDisc = round(stimulixMax[i] / delta_x);
        stimuli[i].xMinDisc = round(stimulixMin[i] / delta_x);
        stimuli[i].yMaxDisc = round(stimuliyMax[i] / delta_y);
        stimuli[i].yMinDisc = round(stimuliyMin[i] / delta_y);

#ifdef CABLEEQ

        // Only one stimulus for CABLEEQ
        if (i > 0)
            stimuli[i].amplitude = 0.0f;

#endif // CABLEEQ
    }
}